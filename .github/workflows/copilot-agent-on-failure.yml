name: "Create Copilot Agent task"

on:
  workflow_run:
    workflows: ["e2e + TestRail"]
    types: [completed]
  workflow_dispatch:
    inputs:
      run_id:
        description: "CI run ID to analyze (optional)"
        required: false

jobs:
  delegate:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion != 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      actions: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # üîê Authenticate gh with a user token (PAT FG or Classic)
      - name: Authenticate gh (OAuth)
        env:
          COPILOT_OAUTH_TOKEN: ${{ secrets.COPILOT_OAUTH_TOKEN }}
        run: |
          set -e
          if [ -z "$COPILOT_OAUTH_TOKEN" ]; then
            echo "::error::COPILOT_OAUTH_TOKEN is empty. Add it in Settings ‚Üí Secrets ‚Üí Actions."; exit 1
          fi
          echo "$COPILOT_OAUTH_TOKEN" | gh auth login --hostname github.com --with-token

      # ‚úÖ Prove we are logged in as a user (must say 'Logged in to github.com as <you>')
      - name: Verify gh auth
        run: |
          gh --version
          gh auth status --hostname github.com

      # Auto mode: take run id from triggering event
      - name: Resolve RUN_ID (auto)
        if: ${{ github.event_name == 'workflow_run' }}
        run: echo "RUN_ID=${{ github.event.workflow_run.id }}" >> $GITHUB_ENV

      # Manual mode: use input run_id or find latest failed
      - name: Resolve RUN_ID (manual)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          if [ -n "${{ github.event.inputs.run_id }}" ]; then
            echo "RUN_ID=${{ github.event.inputs.run_id }}" >> $GITHUB_ENV
          else
            LATEST_FAILED=$(gh run list \
              --workflow "e2e + TestRail" \
              --json databaseId,conclusion,status \
              -q '.[] | select(.conclusion=="failure" and .status=="completed") | .databaseId' \
              | head -n1)
            if [ -z "$LATEST_FAILED" ]; then
              echo "::error::No failed 'e2e + TestRail' runs found to analyze."
              exit 1
            fi
            echo "RUN_ID=$LATEST_FAILED" >> $GITHUB_ENV
          fi

      - name: Ask Copilot to analyze and propose a fix
        env:
          RUN_ID: ${{ env.RUN_ID }}
          REPO: ${{ github.repository }}
          COPILOT_OAUTH_TOKEN: ${{ secrets.COPILOT_OAUTH_TOKEN }}
        run: |
          if [ -z "$COPILOT_OAUTH_TOKEN" ]; then
            echo "::error::COPILOT_OAUTH_TOKEN is empty. Add it in Settings ‚Üí Secrets ‚Üí Actions."; exit 1
          fi
          echo "$COPILOT_OAUTH_TOKEN" | gh auth login --hostname github.com --with-token
          gh agent-task create "
          Analyze the latest failed workflow run (ID: ${RUN_ID}) for ${REPO}.
          Goals:
          - Download artifacts, read JUnit XML: cypress/reports/results-*.xml
          - Cluster failures by spec and test title; identify root cause(s)
          - Reproduce locally (npm ci; npm run cypress:run)
          - Implement the smallest safe fix in code/tests
          - Open a DRAFT PR from 'fix/agent-${RUN_ID}' with:
            * RCA summary
            * Files changed and rationale
            * How I reproduced & how to run locally
          Constraints: follow .github/copilot-instructions.md; no new secrets or external services."