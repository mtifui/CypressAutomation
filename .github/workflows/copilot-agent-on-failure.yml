name: "Create Copilot Agent task"

on:
  workflow_run:
    workflows: ["e2e + TestRail"]
    types: [completed]
  workflow_dispatch:
    inputs:
      run_id:
        description: "CI run ID to analyze (optional)"
        required: false

jobs:
  delegate:
    # auto-run only on failures; always allow manual trigger
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion != 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      actions: read
      issues: write        # <-- needed to create/assign an Issue
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Resolve RUN_ID for auto/manual modes
      - name: Resolve RUN_ID (auto)
        if: ${{ github.event_name == 'workflow_run' }}
        run: echo "RUN_ID=${{ github.event.workflow_run.id }}" >> $GITHUB_ENV

      - name: Resolve RUN_ID (manual)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -n "${{ github.event.inputs.run_id }}" ]; then
            echo "RUN_ID=${{ github.event.inputs.run_id }}" >> $GITHUB_ENV
          else
            LATEST_FAILED=$(gh run list \
              --workflow "e2e + TestRail" \
              --json databaseId,conclusion,status \
              -q '.[] | select(.conclusion=="failure" and .status=="completed") | .databaseId' \
              | head -n1)
            if [ -z "$LATEST_FAILED" ]; then
              echo "::error::No failed 'e2e + TestRail' runs found."; exit 1
            fi
            echo "RUN_ID=$LATEST_FAILED" >> $GITHUB_ENV
          fi

      # Create (or reuse) an Issue and assign Copilot to start the agent
      - name: Start Copilot by assigning an Issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_FULL: ${{ github.repository }}
          RUN_ID: ${{ env.RUN_ID }}
        run: |
          set -euo pipefail
          OWNER="${REPO_FULL%/*}"
          REPO="${REPO_FULL#*/}"

          # Find coding agent actor id for this repo
          COPILOT_ID=$(gh api graphql -f query='
            query($owner:String!, $name:String!) {
              repository(owner:$owner, name:$name) {
                suggestedActors(capabilities:[CAN_BE_ASSIGNED], first:100) {
                  nodes { login __typename ... on Bot { id } ... on User { id } }
                }
              }
            }' -F owner="$OWNER" -F name="$REPO" \
            --jq '.data.repository.suggestedActors.nodes[] | select(.login=="copilot-swe-agent") | .id')

          if [ -z "${COPILOT_ID:-}" ]; then
            echo "::error::Copilot coding agent not enabled for this repo/org (copilot-swe-agent not found)."
            exit 1
          fi

          RUN_URL="https://github.com/${OWNER}/${REPO}/actions/runs/${RUN_ID}"
          TITLE="Agent task: analyze failed run ${RUN_ID} and propose a fix"
          BODY=$(cat <<'EOF'
          Analyze the failed CI run and propose a minimal safe fix.

          **Inputs**
          - CI run: RUN_URL
          - Artifacts: download from the run page (JUnit XML at `cypress/reports/results-*.xml`)

          **Instructions**
          - Cluster failures by spec/test title from JUnit XML.
          - Reproduce locally (Node 22: `npm ci` ; `npm run cypress:run`).
          - Implement smallest safe fix (selectors/timeouts only when justified).
          - Open a **DRAFT** PR from `fix/agent-RUN_ID` with:
            - RCA summary
            - Files changed & rationale
            - Repro steps (before/after)
          - Follow `.github/copilot-instructions.md` and `AGENTS.md`.
          EOF
          )
          BODY="${BODY/RUN_URL/$RUN_URL}"
          BODY="${BODY/RUN_ID/$RUN_ID}"

          # Create the Issue
          ISSUE_NUMBER=$(gh api repos/$OWNER/$REPO/issues -f title="$TITLE" -f body="$BODY" --jq '.number')

          # Get GraphQL node id of the Issue
          ISSUE_ID=$(gh api graphql -f query='
            query($owner:String!, $name:String!, $num:Int!) {
              repository(owner:$owner, name:$name) { issue(number:$num) { id } }
            }' -F owner="$OWNER" -F name="$REPO" -F num="$ISSUE_NUMBER" \
            --jq '.data.repository.issue.id')

          # Assign Copilot to kick off the coding agent
          gh api graphql -f query='
            mutation($assignableId:ID!, $actorIds:[ID!]!) {
              replaceActorsForAssignable(input:{assignableId:$assignableId, actorIds:$actorIds}) {
                assignable { ... on Issue { number } }
              }
            }' -F assignableId="$ISSUE_ID" -F actorIds="[$COPILOT_ID]"

          echo "Assigned Copilot to issue #$ISSUE_NUMBER â€” agent should start and open a draft PR."
